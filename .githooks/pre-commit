#!/usr/bin/env bash

branch="$(git rev-parse --abbrev-ref HEAD)"

if [ "$branch" = "master" ]; then
  echo "You can't commit directly to master branch"
  exit 1
fi

# FRONTEND ESLINT CHECK
###########################
JS_STAGED_FILES=($(git -C client diff --diff-filter=d --cached --name-only | grep -E '^.*\/.*\.(js|jsx|tsx|ts)$'))
echo "$JS_STAGED_FILES"

STAGED_FILES=$FRONTEND_STAGED_FILES
for i in "${!STAGED_FILES[@]}"; do
  DATA=${STAGED_FILES[$i]}
  pattern="frontend/"
  DATA=${DATA/$pattern/}
  STAGED_FILES[$i]=$DATA
done

cd client && pwd && yarn --cwd ../ run lint "${STAGED_FILES[@]}" --fix && cd ../

ESLINT_EXIT="$?"

if [[ "${ESLINT_EXIT}" == 0 ]]; then
  printf "\n\033[42mESLINT SUCCEEDED\033[0m\n"
else
  printf "\n\033[41mCOMMIT FAILED:\033[0m Fix eslint errors and try again\n"
  exit 1
fi

git add "${JS_STAGED_FILES[@]}"

exit $?

# FRONTEND ESLINT CHECK
###########################
# this will retrieve all of the .go files that have been 
# changed since the last commit
STAGED_GO_FILES=$(git diff --cached --name-only -- '*.go')

# we can check to see if this is empty
if [[ $STAGED_GO_FILES == "" ]]; then
    echo "No Go Files to Update"
# otherwise we can do stuff with these changed go files
else
    for file in $STAGED_GO_FILES; do
        echo $file
    done
	cd server
	gofmt -s -w .
	cd ..
fi


gofiles=STAGED_GO_FILES
